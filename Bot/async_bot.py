import asyncio

from aiogram import F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from __bot_init__ import Form
import __bot_init__ as b_init
import admins_keyboard as adm_kb
import Managers.chat_manager as chat_manager
import bot_comands
from delivery_order_dp import callback_order_delivery_np
from delivery_order_jk import callback_order_delivery_jk

bot = b_init.bot
dp = b_init.dp
admin_chat_ids = b_init.admin_chat_ids
JsonManager = b_init.JsonManager
SheetManager = b_init.SheetManager
# OrderManager = b_init.OrderManager
ChatManager = chat_manager.ChatManager()

@dp.message(F.contact, Form.no_contact)
async def get_contac(mess: types.Message, state: FSMContext):
    await state.set_state(None)
    message_data = {
        str(mess.from_user.id): {
            "id": mess.from_user.id,
            "username": mess.from_user.username,
            "first_name": mess.from_user.first_name,
            "last_name": mess.from_user.last_name,
            "number": mess.contact.phone_number
        }
    }
    print(mess.from_user)
    print(mess.contact)
    JsonManager.add_data(message_data)
    message = '–ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç—Ä–∏–º–∞–Ω–æüì© —ñ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ‚öôÔ∏è'
    await bot.send_message(mess.chat.id,
                           message,
                           reply_markup=types.ReplyKeyboardRemove())
    await bot_comands.order_mess(mess, mess.chat.id)

@dp.message(Form.runUp_consultation)
async def runUp_consultation(mess: types.Message, state: FSMContext):
    admin_message = f"id:{mess.from_user.id}\n–ö–ª—ñ—î–Ω—Ç: @{mess.from_user.username}\n–Ü–º'—è: {mess.from_user.full_name}\n–ó–∞–ø–∏—Ç –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞: \n\n{mess.text}"
    for id_adm in admin_chat_ids:
        data = JsonManager._get_data_()
        user_number = data[str(mess.from_user.id)]['number']
        await bot.send_contact(chat_id=id_adm,
                               phone_number=user_number,
                               first_name=mess.from_user.first_name,
                               last_name=mess.from_user.last_name)
        await bot.send_message(chat_id=id_adm,
                               text=admin_message, 
                               reply_markup=adm_kb.adm_consultation_builder.as_markup())
        
    client_reply = "–ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ñ–∞—Ö—ñ–≤—Ü—è!"
    await mess.reply(client_reply)
    await state.set_state(Form.during_consultation)

@dp.message(Form.order_await)
async def order_consultation(mess: types.Message, state: FSMContext):
    if mess.text == adm_kb.disconect_consultation.text:
        await state.set_state(Form.order_processing)
        message = '–§–∞—Ö—ñ–≤–µ—Ü—å üë©‚Äç‚öïÔ∏è –¥—ñ–∑–Ω–∞–≤—Å—è –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –ø—Ä–∏–≤–æ–¥—É –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!'
        await bot.send_message(ChatManager.client_id,
                               message,
                               reply_markup=types.ReplyKeyboardRemove())
        ChatManager.clear_id_chating()
    else:
        await ChatManager.chating(mess)

@dp.message(Form.during_consultation)
async def during_consultation(mess: types.Message, state: FSMContext):
    if mess.text == adm_kb.disconect_consultation.text:
        await state.set_state(None)
        message = '–ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞‚ùóÔ∏è\n–î—è–∫—É—é –∑–∞ –∑–≤–µ—Ä–µ–Ω–Ω—è –¥–æ —Ñ–∞—Ö—ñ–≤—Ü—è üë©‚Äç‚öïÔ∏è'
        await bot.send_message(ChatManager.client_id,
                               message,
                               reply_markup=types.ReplyKeyboardRemove())
        await bot_comands.order_mess(mess, ChatManager.client_id)
        ChatManager.clear_id_chating()
    else:
        await ChatManager.chating(mess)


"""
***********************************************************
************************ CaLL_BACK ************************
***********************************************************
"""
@dp.callback_query(lambda call: call.data.startswith('cli'))
async def callback_client(call: types.CallbackQuery, state: FSMContext):
    # print('cli_handler')
    await bot.edit_message_reply_markup(call.message.chat.id,
                                        call.message.message_id,
                                        reply_markup=None)

    if call.data == b_init.inl_btn_consultation.callback_data:
        message = '–ó–∞–ø–∏—Ç –Ω–∞ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—é üì®\n\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —ñ –æ—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Ñ–∞—Ö—ñ–≤—Ü—è!'
        await bot.send_message(call.from_user.id, 
                               text=message)
        await state.set_state(Form.runUp_consultation)
        await bot.answer_callback_query(call.id)

    await callback_order_delivery_np(call, state)
    await callback_order_delivery_jk(call, state)

@dp.callback_query(lambda call: call.data.startswith('adm'))
async def callback_admin(call: types.CallbackQuery, state: FSMContext):
    # print('adm_handler')
    if call.data == adm_kb.inl_btn_order.callback_data:
        await state.set_state(Form.order_processing)
        client_message = '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Äüë©‚Äçüíª –≤–∑—è–≤ –≤ –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è!'
        client_id = call.message.text.split()[0][3:]
        await bot.send_message(client_id, client_message)
        message = call.message.text + '\n\nüìå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –≤–∑—è—Ç–æ –≤ –æ–±—Ä–æ–±–∫—É‚öôÔ∏è'
        keyboard = InlineKeyboardBuilder().row(
            adm_kb.inl_btn_qustion_client, 
            adm_kb.inl_btn_accept_order,
            width=1)
        await bot.edit_message_text(message,
                                    call.message.chat.id,
                                    call.message.message_id,
                                    reply_markup=keyboard.as_markup())
        await bot.answer_callback_query(call.id)

    if call.data == adm_kb.inl_btn_accept_order.callback_data:
        
        client_message = '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ‚úÖ\n–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É!'
        client_id = call.message.text.split()[0][3:]
        await bot.send_message(client_id, client_message)
        message = call.message.text + '\n\nüìå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ‚úÖ'
        keyboard = InlineKeyboardBuilder().row(
            adm_kb.inl_btn_qustion_client, 
            adm_kb.inl_btn_acept_delivery,
            width=1)
        await bot.edit_message_text(message,
                                    call.message.chat.id,
                                    call.message.message_id,
                                    reply_markup=keyboard.as_markup())
        await bot.answer_callback_query(call.id)
        await SheetManager.writing_order(SheetManager.salutna_delivery_sheet,
                                   client_id,
                                   '-',
                                   '-',
                                   '-',
                                   '-',
                                   '-')

    if call.data == adm_kb.inl_btn_acept_delivery.callback_data:
        client_message = '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ! üì¶\n\n–î—è–∫—É—é —â–æ –æ–±–µ—Ä–∞—î—Ç–µ –Ω–∞—Å!'
        client_id = call.message.text.split()[0][3:]
        await bot.send_message(client_id, client_message)
        message = call.message.text + '\n\nüìå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ üì¶\n‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–ü–æ–≤–Ω—ñ—Å—Ç—é –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è'
        await bot.edit_message_text(message,
                                    call.message.chat.id,
                                    call.message.message_id,
                                    reply_markup=None)
        await bot.answer_callback_query(call.id)

    if call.data == adm_kb.inl_btn_answer_consultation.callback_data:
        await state.set_state(Form.during_consultation)
        message = call.message.text + '\n–ó–∞–ø–∏—Ç –∫–ª—ñ—î–Ω—Ç–∞ –≤–∑—è—Ç–æ –≤ –æ–±—Ä–æ–±–∫—É ‚öôÔ∏è'
        await bot.edit_message_text(message,
                                    call.message.chat.id,
                                    call.message.message_id,
                                    reply_markup=None)
        message = f'–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É üëá'
        await bot.send_message(call.from_user.id, message, reply_markup=adm_kb.adm_rpl_builder)
        client_id = int(call.message.text.split()[0][3:])
        ChatManager.set_id_chating(call.from_user.id, client_id)
        await bot.answer_callback_query(call.id)
    
    if call.data == adm_kb.inl_btn_qustion_client.callback_data:
        await state.set_state(Form.order_await)
        client_id = int(call.message.text.split()[0][3:])
        client_message = '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Äüë©‚Äçüíª —Ö–æ—á–µ –∑–∞–¥–∞—Ç–∏ –≤–∞–º –∑–∞–ø–∏—Ç–∞–Ω–Ω—è!\n–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì©'
        await bot.send_message(client_id, client_message)
        message = f'–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É üëá'
        # await bot.send_message(call.from_user.id, message, reply_markup=adm_kb.adm_rpl_builder)
        await call.message.reply(message, reply_markup=adm_kb.adm_rpl_builder)
        ChatManager.set_id_chating(call.from_user.id, client_id)
        await bot.answer_callback_query(call.id)
        
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())