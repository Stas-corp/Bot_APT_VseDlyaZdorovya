import json

from aiogram import F, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from __bot_init__ import Form
import __bot_init__ as b_init
import admins_keyboard as adm_kb
from Managers.order_manager import Manager as OrderManager

bot = b_init.bot
dp = b_init.dp
redis_storage = b_init.redis_storage

admin_chat_ids = b_init.admin_chat_ids
JsonManager = b_init.JsonManager
SheetManager = b_init.SheetManager

@dp.message(Form.set_pickup_address)
async def set_address(mess: types.Message, state: FSMContext):
    # await state.update_data(medicament=mess.text.lower())
    data = await state.get_data()
    order = data['order']
    order['order']=mess.text.lower()
    message = '–û–±–µ—Ä—ñ—Ç—å –∞–ø—Ç–µ–∫—É –¥–ª—è —Å–∞–º–æ–≤–∏–≤–æ–∑—É üëá'
    await mess.reply(text=message,
                    reply_markup=b_init.keyboard_apt_adress().as_markup())
    await state.update_data(order=order)
    
@dp.message(Form.order)
async def order_received(mess: types.Message, state: FSMContext):
    data = await state.get_data()
    order = data['order']
    order['address'] = data['address']
    admin_message = f"id:{mess.from_user.id}\n‚Ññ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order['order_id']}\n–ö–ª—ñ—î–Ω—Ç: @{mess.from_user.username}\n–Ü–º'—è –≤ –¢–ì: {mess.from_user.full_name}\nüìç –ê–¥—Ä–µ—Å–∞: {order['address']}\nüì¶ –û—Ç—Ä–∏–º–∞–Ω–Ω–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n{order['order']}\n\n‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–°–∞–º–æ–≤–∏–≤—ñ–∑‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è"
    for id_adm in admin_chat_ids:
        await bot.send_contact(chat_id=id_adm,
                               phone_number=order['phone_number'],
                               first_name=mess.from_user.first_name,
                               last_name=mess.from_user.last_name)
        await bot.send_message(chat_id=id_adm,
                               text=admin_message, 
                               reply_markup=adm_kb.adm_order_builder.as_markup())

    client_message = "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ üì•\n–ú–∏ —Å–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è!"
    await bot.send_message(mess.from_user.id,
                           client_message)
    await state.set_state(Form.order_await)
    await state.update_data(order=order)
    OrderManager.order_create(order)
    # await redis_storage.redis.hmset(str(mess.from_user.id), order)

"""
***********************************************************
************************ CaLL_BACK ************************
***********************************************************
"""
async def callback_order_delivery_pk(call: types.CallbackQuery, state: FSMContext):
    if call.data == b_init.inl_btn_pickup_order.callback_data:
        user_id = str(call.from_user.id)
        order = OrderManager(user_id)
        message = '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Å–∞–º–æ–≤–∏–≤–æ–∑—É üîí\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–µ–ø–∞—Ä–∞—Ç—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—É –∞–ø—Ç–µ–∫–∏:'
        await bot.send_message(call.from_user.id, 
                               text=message)
        await state.set_state(Form.set_pickup_address)
        await bot.answer_callback_query(call.id)
        order.update_property(
            order_id=order.get_order_number(),
            delivery_type='PK_delivery',
            user_name=call.from_user.username,
            full_name=call.from_user.full_name,
            phone_number=JsonManager.get_phone_number(str(call.from_user.id)))
        # await state.update_data(order_obj=json.dumps(order))
        await state.update_data(order=order.__conver_dict__)

    if call.data.startswith('cli_apt_address_'):
        address = call.data.split('_')[-1]
        # print(address)
        previous_message = call.message.reply_to_message
        await state.update_data(address=address)
        await state.set_state(Form.order)
        await order_received(previous_message, state)